    double ratio(int, int, bool) except +
    double ratio(char *, int, bool) except +
    double ratio(std_string, int, bool) except +
    
    # ext_soil_df functions
    map[int, double] ext_soil_df_map
    double ext_soil_df(int, int, bool) except +
    double ext_soil_df(char *, int, bool) except +
    double ext_soil_df(std_string, int, bool) except +

    # ingest_df functions
    map[int, double] ingest_df_map
    map[int, double] fluid_frac_map
    double ingest_df(int, int, bool) except +
    double ingest_df(char *, int, bool) except +
    double ingest_df(std_string, int, bool) except +
    double fluid_frac(int, int, bool) except +
    double fluid_frac(char *, int, bool) except +
    double fluid_frac(std_string, int, bool) except +

    # inhale_df functions
    map[int, double] inhale_df_map
    map[int, std_string] lung_mod_map
    double inhale_df(int, int, bool) except +
    double inhale_df(char *, int, bool) except +
    double inhale_df(std_string, int, bool) except +
    std_string lung_mod(int, int, bool) except +
    std_string lung_mod(char *, int, bool) except +
    std_string lung_mod(std_string, int, bool) except +



# ratio
cdef conv._MapIntDouble ratio_map_proxy = conv.MapIntDouble(False)
ratio_map_proxy.map_ptr = &cpp_data.ratio_map
ratio_map = ratio_map_proxy

def ratio(nuc, source=0, get_errors=False):
    """Finds ratio of dose from external air to dose from inhalation for a tracked nuclide.

    Parameters
    ----------
    nuc : int or str 
        Parent nuclide.
    source : int or str
        The int or corresponding dictionary key for the source dataset.
        Allowed values are:
        'EPA': 0, 'DOE' : 1, 'GENII' : 2
    get_errors : boolean
        return the error in the value if possible or 0

    Returns
    -------
    ratio : float
        Fraction of dose from external air to dose from inhalation.

    Notes
    -----
    If the nuclide is not found, and the ratio is set to zero.
    """
    srcmap = {'EPA': 0, 'DOE': 1, 'GENII': 2}
    if isinstance(source, str):
        sourceint = srcmap[source]
    elif isinstance(source, int):
        if 0 <= source <= 2:
            sourceint = source
        else:
            raise ValueError
    else:
        raise ValueError('Only ints or strings are accepted')

    if isinstance(nuc, int):
        ratio = cpp_data.ratio(<int> nuc, <int> source, get_errors)
    elif isinstance(nuc, basestring):
        ratio = cpp_data.ratio(<char *> nuc, <int> source, get_errors)
    else:
        raise pyne.nucname.NucTypeError(nuc)

    return ratio

# external soil df
cdef conv._MapIntDouble ext_soil_df_map_proxy = conv.MapIntDouble(False)
ext_soil_df_map_proxy.map_ptr = &cpp_data.ext_soil_df_map
ext_soil_df_map = ext_soil_df_map_proxy

def ext_soil_df(nuc, source=0, get_errors=False):
    """Finds the external soil dose factor for a tracked nuclide.

    Parameters
    ----------
    nuc : int or str 
        Parent nuclide.
    source : int or str
        The int or corresponding dictionary key for the source dataset.
        Allowed values are:
        'EPA': 0, 'DOE' : 1, 'GENII' : 2
    get_errors : boolean
        return the error in the value if possible or 0

    Returns
    -------
    ext_soil_df : float
        Dose factor from 15 cm of external soil exposure [mrem/hr per Ci/m^2]

    Notes
    -----
    If the nuclide is not found, and the dose factor is set to zero.
    """
    srcmap = {'EPA': 0, 'DOE': 1, 'GENII': 2}
    if isinstance(source, str):
        sourceint = srcmap[source]
    elif isinstance(source, int):
        if 0 <= source <= 2:
            sourceint = source
        else:
            raise ValueError
    else:
        raise ValueError('Only ints or strings are accepted')

    if isinstance(nuc, int):
        ext_soil_df = cpp_data.ext_soil_df(<int> nuc, <int> source, get_errors)
    elif isinstance(nuc, basestring):
        ext_soil_df = cpp_data.ext_soil_df(<char *> nuc, <int> source, get_errors)
    else:
        raise pyne.nucname.NucTypeError(nuc)

    return ext_soil_df
    
# ingestion df
cdef conv._MapIntDouble ingest_df_map_proxy = conv.MapIntDouble(False)
ingest_df_map_proxy.map_ptr = &cpp_data.ingest_df_map
ingest_df_map = ingest_df_map_proxy

def ingest_df(nuc, source=0, get_errors=False):
    """Finds the dose factor due to ingestion for a tracked nuclide.

    Parameters
    ----------
    nuc : int or str 
        Parent nuclide.
    source : int or str
        The int or corresponding dictionary key for the source dataset.
        Allowed values are:
        'EPA': 0, 'DOE' : 1, 'GENII' : 2
    get_errors : boolean
        return the error in the value if possible or 0

    Returns
    -------
    ingest : float
        Dose factor from exposure due to ingestion [mrem/pCi]

    Notes
    -----
    If the nuclide is not found, and the dose factor is set to zero.
    """
    srcmap = {'EPA': 0, 'DOE': 1, 'GENII': 2}
    if isinstance(source, str):
        sourceint = srcmap[source]
    elif isinstance(source, int):
        if 0 <= source <= 2:
            sourceint = source
        else:
            raise ValueError
    else:
        raise ValueError('Only ints or strings are accepted')

    if isinstance(nuc, int):
        ingest_df = cpp_data.ingest_df(<int> nuc, <int> source, get_errors)
    elif isinstance(nuc, basestring):
        ingest_df = cpp_data.ingest_df(<char *> nuc, <int> source, get_errors)
    else:
        raise pyne.nucname.NucTypeError(nuc)

    return ingest_df
    
# fluid_frac
cdef conv._MapIntDouble fluid_frac_map_proxy = conv.MapIntDouble(False)
fluid_frac_map_proxy.map_ptr = &cpp_data.fluid_frac_map
fluid_frac_map = fluid_frac_map_proxy

def fluid_frac(nuc, source=0, get_errors=False):
    """Finds fraction of activity that is absorbed by body fluids for a tracked nuclide.

    Parameters
    ----------
    nuc : int or str 
        Parent nuclide.
    source : int or str
        The int or corresponding dictionary key for the source dataset.
        Allowed values are:
        'EPA': 0, 'DOE' : 1, 'GENII' : 2
    get_errors : boolean
        return the error in the value if possible or 0

    Returns
    -------
    fluid_frac : float
        Fraction of activity that is absorbed by body fluids.

    Notes
    -----
    If the nuclide is not found, and the fluid fraction is set to zero.
    """
    srcmap = {'EPA': 0, 'DOE': 1, 'GENII': 2}
    if isinstance(source, str):
        sourceint = srcmap[source]
    elif isinstance(source, int):
        if 0 <= source <= 2:
            sourceint = source
        else:
            raise ValueError
    else:
        raise ValueError('Only ints or strings are accepted')

    if isinstance(nuc, int):
        fluid_frac = cpp_data.fluid_frac(<int> nuc, <int> source, get_errors)
    elif isinstance(nuc, basestring):
        fluid_frac = cpp_data.fluid_frac(<char *> nuc, <int> source, get_errors)
    else:
        raise pyne.nucname.NucTypeError(nuc)

    return fluid_frac

# inhalation df
cdef conv._MapIntDouble inhale_df_map_proxy = conv.MapIntDouble(False)
inhale_df_map_proxy.map_ptr = &cpp_data.inhale_df_map
inhale_df_map = inhale_df_map_proxy

def inhale_df(nuc, source=0, get_errors=False):
    """Finds the dose factor due to inhalation for a tracked nuclide.

    Parameters
    ----------
    nuc : int or str 
        Parent nuclide.
    source : int or str
        The int or corresponding dictionary key for the source dataset.
        Allowed values are:
        'EPA': 0, 'DOE' : 1, 'GENII' : 2
    get_errors : boolean
        return the error in the value if possible or 0

    Returns
    -------
    inhale_df : float
        Dose factor from exposure due to inhalation [mrem/pCi]

    Notes
    -----
    If the nuclide is not found, and the dose factor is set to zero.
    """
    srcmap = {'EPA': 0, 'DOE': 1, 'GENII': 2}
    if isinstance(source, str):
        sourceint = srcmap[source]
    elif isinstance(source, int):
        if 0 <= source <= 2:
            sourceint = source
        else:
            raise ValueError
    else:
        raise ValueError('Only ints or strings are accepted')

    if isinstance(nuc, int):
        inhale_df = cpp_data.inhale_df(<int> nuc, <int> source, get_errors)
    elif isinstance(nuc, basestring):
        inhale_df = cpp_data.inhale_df(<char *> nuc, <int> source, get_errors)
    else:
        raise pyne.nucname.NucTypeError(nuc)

    return inhale_df

# lung model
cdef conv._MapIntStr lung_mod_map_proxy = conv.MapIntStr(False)
lung_mod_map_proxy.map_ptr = &cpp_data.lung_mod_map
lung_mod_map = lung_mod_map_proxy

def lung_mod(nuc, source=0, get_errors=False):
    """Finds the lung model for the inhalation df for a tracked nuclide.

    Parameters
    ----------
    nuc : int or str 
        Parent nuclide.
    source : int or str
        The int or corresponding dictionary key for the source dataset.
        Allowed values are:
        'EPA': 0, 'DOE' : 1, 'GENII' : 2
    get_errors : boolean
        return the error in the value if possible or 0

    Returns
    -------
    lung_mod : string
        Model of lung used for calculation (D (days), W (weeks), or Y (years)).

    Notes
    -----
    If the nuclide is not found, and the lung model is set to zero.
    """
    srcmap = {'EPA': 0, 'DOE': 1, 'GENII': 2}
    if isinstance(source, str):
        sourceint = srcmap[source]
    elif isinstance(source, int):
        if 0 <= source <= 2:
            sourceint = source
        else:
            raise ValueError
    else:
        raise ValueError('Only ints or strings are accepted')

    if isinstance(nuc, int):
        lung_mod = cpp_data.lung_mod(<int> nuc, <int> source, get_errors)
    elif isinstance(nuc, basestring):
        lung_mod = cpp_data.lung_mod(<char *> nuc, <int> source, get_errors)
    else:
        raise pyne.nucname.NucTypeError(nuc)

    return lung_mod
    

  if ((source == 0) && (ext_air_df_map.empty()))
  {
    // Don't fail if we can't load the library
    try
    {
      source_location = "/dose_factors/epa";
      _load_df_map(source_location);
      return ext_air_df(nuc, source, get_error);
    }
    catch(...){};
  }
  else if (source == 1)
  {
    try
    {
      source_location = "/dose_factors/doe";
      _load_df_map(source_location);
      return ext_air_df(nuc, source, get_error);
    }
    catch(...){};
  }
  else if (source == 2)
  {
    try
    {
      source_location = "/dose_factors/genii";
      _load_df_map(source_location);
      return ext_air_df(nuc, source, get_error);
    }
    catch(...){};
  }



